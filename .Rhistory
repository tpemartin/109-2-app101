#   "chineseNumber1_char[.y]" = ".y-1"},
# for (.z in 2:11) {
#   "chineseNumber2_char[.z]" = ".z-1"}
)
)}
) -> new_levels01
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
[一壹] = "1",
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"二" = "2",
"三" = "3",
"四" = "4",
"十" = "10"
# for (.y in 2:11) {
#   "chineseNumber1_char[.y]" = ".y-1"},
# for (.z in 2:11) {
#   "chineseNumber2_char[.z]" = ".z-1"}
)
)}
) -> new_levels01
pattern <- map(
list(2,3,4,5,6,7,8,9,10,11),
~{
"chineseNumber1_char[.x]" = ".x-1"
"chineseNumber2_char[.x]" = ".x-1"
}
)
for (.y in list(2,3,4,5,6,7,8,9,10,11)) {
paste(
"chineseNumber1_char[.y]" = ".y-1",
"chineseNumber2_char[.y]" = ".y-1"
)
} -> pattern01
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> new_levels01
as.numeric(new_levels01)
order(as.numeric(new_levels01))
sort(as.numeric(new_levels01))
as.numeric(new_levels01)
sort(as.numeric(new_levels01))
sort(
{new <- name(order(as.numeric(new_levels01))) <- oldLevels
new}
)
new <- list()
sort(
{new <- name(order(as.numeric(new_levels01))) <- oldLevels
new}
)
new <- sort(new_levels01)
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> new_levels01
new <- sort(new_levels01)
new01 <- sort(new_levels01)
new01 <- sort(order(new_levels01))
new01 <- sort(order(as.numeric(new_levels01)))
new01
new01 <- sort(as.numeric(new_levels01))
new01
new_levels02 <- unlist(new_levels01)
names(new_levels02) <- oldLevels
names(sort(as.numeric(new_levels01)))
new_levels02 <- unlist(new_levels01)
names(new_levels02) <- oldLevels
names(sort(as.numeric(new_levels01))) -> new_levels
new_levels
new_levels02 <- unlist(new_levels01)
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> new_levels01
new_levels02 <- unlist(new_levels01)
new_levels02
new_levels02 <- as.numeric(unlist(new_levels01)
new_levels02 <- as.numeric(unlist(new_levels01)
new_levels02 <- as.numeric(unlist(new_levels01))
new_levels02
new_levels02 <- as.numeric(unlist(new_levels01))
names(new_levels02) <- oldLevels
names(sort(as.numeric(new_levels01))) -> new_levels
new_levels
new_levels02 <- as.numeric(unlist(new_levels01))
names(new_levels02)
oldLevels
names(new_levels02) <- oldLevels
new_levels02 <- as.numeric(unlist(new_levels01))
names(new_levels02) <- oldLevels
names(new_levels02)
new_levels02 <- as.numeric(unlist(new_levels01))
names(new_levels02) <- oldLevels
names(new_levels02)
names(sort(new_levels02)) -> new_levels
new_levels
new_levels
# 前言
chineseNumber1 <- "零一二三四五六七八九十"
chineseNumber2 <- "零壹貳參肆伍陸柒捌玖拾"
chineseNumber1_char <- unlist(stringr::str_split(chineseNumber1,""))
chineseNumber2_char <- unlist(stringr::str_split(chineseNumber2,""))
oldLevels <- c("一", "七", "五", "五十七", "參拾參", "拾壹")
library(stringr)
library(glue)
library(purrr)
# 排序
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> new_levels01
new_levels02 <- as.numeric(unlist(new_levels01))
names(new_levels02) <- oldLevels
names(sort(new_levels02)) -> new_levels
new_levels
# 前言
chineseNumber1 <- "零一二三四五六七八九十"
chineseNumber2 <- "零壹貳參肆伍陸柒捌玖拾"
chineseNumber1_char <- unlist(stringr::str_split(chineseNumber1,""))
chineseNumber2_char <- unlist(stringr::str_split(chineseNumber2,""))
oldLevels <- c("一", "七", "五", "五十七", "參拾參", "拾壹")
library(stringr)
library(glue)
library(purrr)
# 排序
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> transfer_num
transfer_num <- as.numeric(unlist(transfer_num))
names(transfer_num) <- oldLevels
names(sort(transfer_num)) -> new_levels
new_levels
#' Sorting chinese numbers
#'
#' @param origin A character vector of Chinese numbers
#' @param descreasing A logical (default=F). TRUE means the return result should order numbers from the largest to the smallest
#'
#' @return A sorted vector of origin input
#' @export
#'
#' @examples None.
sort_chineseNumbers <- function(origin, descreasing=F){
return(sorted_origin)
}
knitr::opts_chunk$set(echo = TRUE)
# 排序
sort_chineseNumbers <- function(oldLevels, descreasing=F){
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> transfer_num
transfer_num <- as.numeric(unlist(transfer_num))
names(transfer_num) <- oldLevels
names(sort(transfer_num, decreasing)) -> new_levels
return(new_levels)
}
View(sort_chineseNumbers)
# 前言
chineseNumber1 <- "零一二三四五六七八九十"
chineseNumber2 <- "零壹貳參肆伍陸柒捌玖拾"
chineseNumber1_char <- unlist(stringr::str_split(chineseNumber1,""))
chineseNumber2_char <- unlist(stringr::str_split(chineseNumber2,""))
oldLevels <- c("一", "七", "五", "五十七", "參拾參", "拾壹", "三十")
library(stringr)
library(glue)
library(purrr)
# 排序
sort_chineseNumbers <- function(oldLevels, descreasing=F){
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> transfer_num
transfer_num <- as.numeric(unlist(transfer_num))
names(transfer_num) <- oldLevels
names(sort(transfer_num, decreasing)) -> new_levels
return(new_levels)
}
# 排序
sort_chineseNumbers <- function(origin, descreasing=F){
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> transfer_num
transfer_num <- as.numeric(unlist(transfer_num))
names(transfer_num) <- oldLevels
names(sort(transfer_num, decreasing)) -> new_levels
new_levels
return(sorted_origin)
}
sort_chineseNumbers(oldLevels,F)
# 排序
sort_chineseNumbers <- function(origin, descreasing=F){
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> transfer_num
transfer_num <- as.numeric(unlist(transfer_num))
names(transfer_num) <- oldLevels
names(sort(transfer_num, `decreasing`)) -> new_levels
new_levels
return(sorted_origin)
}
sort_chineseNumbers(oldLevels,F)
# 排序
sort_chineseNumbers <- function(origin, descreasing=F){
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> transfer_num
transfer_num <- as.numeric(unlist(transfer_num))
names(transfer_num) <- oldLevels
names(sort(transfer_num, `F`)) -> new_levels
new_levels
return(sorted_origin)
}
sort_chineseNumbers(oldLevels,F)
# 排序
sort_chineseNumbers <- function(origin, descreasing=F){
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> transfer_num
transfer_num <- as.numeric(unlist(transfer_num))
names(transfer_num) <- oldLevels
names(sort(transfer_num, `F`)) -> sorted_origin
return(sorted_origin)
}
sort_chineseNumbers(oldLevels,F)
sort_chineseNumbers(oldLevels,T)
# 排序
sort_chineseNumbers <- function(origin, descreasing=F){
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> transfer_num
transfer_num <- as.numeric(unlist(transfer_num))
names(transfer_num) <- oldLevels
names(sort(transfer_num, `decreasing`)) -> sorted_origin
return(sorted_origin)
}
sort_chineseNumbers(oldLevels,T)
# 排序
sort_chineseNumbers <- function(origin, decreasing=F){
map(
1:length(oldLevels),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> transfer_num
transfer_num <- as.numeric(unlist(transfer_num))
names(transfer_num) <- oldLevels
names(sort(transfer_num, `decreasing`)) -> sorted_origin
return(sorted_origin)
}
sort_chineseNumbers(oldLevels,T)
# 排序
sort_chineseNumbers <- function(origin, decreasing=F){
library(stringr)
library(glue)
library(purrr)
map(
1:length(origin),
~{str_replace_all(
oldLevels[.x],
c("零" = "0",
"[一壹]" = "1",
"[二貳]" = "2",
"[三參]" = "3",
"[四肆]" = "4",
"[五伍]" = "5",
"[六陸]" = "6",
"[七柒]" = "7",
"[八捌]" = "8",
"[九玖]" = "9",
"[十拾]" = "10"
# for (.y in 2:11) {
#   "[chineseNumber1_char[.y]chineseNumber2_char[.z]]" = ".y-1"},
)
)}
) -> transfer_num
transfer_num <- as.numeric(unlist(transfer_num))
names(transfer_num) <- origin
names(sort(transfer_num, `decreasing`)) -> sorted_origin
return(sorted_origin)
}
# 前言
chineseNumber1 <- "零一二三四五六七八九十"
chineseNumber2 <- "零壹貳參肆伍陸柒捌玖拾"
chineseNumber1_char <- unlist(stringr::str_split(chineseNumber1,""))
chineseNumber2_char <- unlist(stringr::str_split(chineseNumber2,""))
oldLevels <- c("一", "七", "五", "五十七", "參拾參", "拾壹", "三十", "九十九")
library(stringr)
library(glue)
library(purrr)
sort_chineseNumbers(oldLevels,T)
