levels = levels99
)
newLevels
order(newLevels)
newLevels
order(newLevels)
newLevels
as.character(newLevels)
chineseNumber1 <- "零一二三四五六七八九十"
chineseNumber2 <- "零壹貳參肆伍陸柒捌玖拾"
chineseNumber1_char <- unlist(stringr::str_split(chineseNumber1,""))
chineseNumber2_char <- unlist(stringr::str_split(chineseNumber2,""))
oldLevels <- c("一", "七", "五", "五十七", "參拾參", "拾壹")
library(stringr)
library(glue)
library(purrr)
# 十位數
tens1 <- map(
list(3,4,5,6,7,8,9,10),
~{paste(chineseNumber1_char[.x], "十", sep = "")}) # 二十、三十、...
tens2 <- map(
list(3,4,5,6,7,8,9,10),
~{paste(chineseNumber2_char[.x], "拾", sep = "")}) # 貳拾、參拾、...
# 個位數
`0` <- map(
list(1,2,3,4,5,6,7,8,9,10,11),
~{c(
paste(chineseNumber1_char[.x]),
paste(chineseNumber2_char[.x]))}
)
`0` <- unlist(`0`)
`0` <- `0`[2:22]
{
`11` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste("十", chineseNumber1_char[.x], sep = ""),
paste("拾", chineseNumber2_char[.x], sep = "") )}  )
`11` <- unlist(`11`)
} # 十一、拾壹
{
`21` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[1], chineseNumber1_char[.x], sep = ""),
paste(tens2[1], chineseNumber2_char[.x], sep = "") )}  )
`21` <- unlist(`21`)
}
{
`31` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[2], chineseNumber1_char[.x], sep = ""),
paste(tens2[2], chineseNumber2_char[.x], sep = "") )}  )
`31` <- unlist(`31`)
}
{
`41` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[3], chineseNumber1_char[.x], sep = ""),
paste(tens2[3], chineseNumber2_char[.x], sep = "") )}  )
`41` <- unlist(`41`)
}
{
`51` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[4], chineseNumber1_char[.x], sep = ""),
paste(tens2[4], chineseNumber2_char[.x], sep = "") )}  )
`51` <- unlist(`51`)
}
{
`61` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[5], chineseNumber1_char[.x], sep = ""),
paste(tens2[5], chineseNumber2_char[.x], sep = "") )}  )
`61` <- unlist(`61`)
}
{
`71` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[6], chineseNumber1_char[.x], sep = ""),
paste(tens2[6], chineseNumber2_char[.x], sep = "") )}  )
`71` <- unlist(`71`)
}
{
`81` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[7], chineseNumber1_char[.x], sep = ""),
paste(tens2[7], chineseNumber2_char[.x], sep = "") )}  )
`81` <- unlist(`81`)
}
{
`91` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[8], chineseNumber1_char[.x], sep = ""),
paste(tens2[8], chineseNumber2_char[.x], sep = "") )}  )
`91` <- unlist(`91`)
}
# 世紀大合併
levels99 <- list(`0`,
`11`, tens1[1], tens2[1],
`21`, tens1[2], tens2[2],
`31`, tens1[3], tens2[3],
`41`, tens1[4], tens2[4],
`51`, tens1[5], tens2[5],
`61`, tens1[6], tens2[6],
`71`, tens1[7], tens2[7],
`81`, tens1[8], tens2[8],
`91`)
levels99 <- unlist(levels99) # 99*2 + "零" = 199
# factor
newLevels <- factor(
oldLevels,
levels = levels99
)
as.character(newLevels)
newLevels
chineseNumber1 <- "零一二三四五六七八九十"
chineseNumber2 <- "零壹貳參肆伍陸柒捌玖拾"
chineseNumber1_char <- unlist(stringr::str_split(chineseNumber1,""))
chineseNumber2_char <- unlist(stringr::str_split(chineseNumber2,""))
fct_numbers <- factor(c("一","五","七", "參拾參","五十七","拾壹"))
oldLevels <- levels(fct_numbers)
oldLevels
library(stringr)
library(glue)
library(purrr)
# 十位數
tens1 <- map(
list(3,4,5,6,7,8,9,10),
~{paste(chineseNumber1_char[.x], "十", sep = "")}) # 二十、三十、...
tens2 <- map(
list(3,4,5,6,7,8,9,10),
~{paste(chineseNumber2_char[.x], "拾", sep = "")}) # 貳拾、參拾、...
# 個位數
`0` <- map(
list(1,2,3,4,5,6,7,8,9,10,11),
~{c(
paste(chineseNumber1_char[.x]),
paste(chineseNumber2_char[.x]))}
)
`0` <- unlist(`0`)
`0` <- `0`[2:22]
{
`11` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste("十", chineseNumber1_char[.x], sep = ""),
paste("拾", chineseNumber2_char[.x], sep = "") )}  )
`11` <- unlist(`11`)
} # 十一、拾壹
{
`21` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[1], chineseNumber1_char[.x], sep = ""),
paste(tens2[1], chineseNumber2_char[.x], sep = "") )}  )
`21` <- unlist(`21`)
}
{
`31` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[2], chineseNumber1_char[.x], sep = ""),
paste(tens2[2], chineseNumber2_char[.x], sep = "") )}  )
`31` <- unlist(`31`)
}
{
`41` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[3], chineseNumber1_char[.x], sep = ""),
paste(tens2[3], chineseNumber2_char[.x], sep = "") )}  )
`41` <- unlist(`41`)
}
{
`51` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[4], chineseNumber1_char[.x], sep = ""),
paste(tens2[4], chineseNumber2_char[.x], sep = "") )}  )
`51` <- unlist(`51`)
}
{
`61` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[5], chineseNumber1_char[.x], sep = ""),
paste(tens2[5], chineseNumber2_char[.x], sep = "") )}  )
`61` <- unlist(`61`)
}
{
`71` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[6], chineseNumber1_char[.x], sep = ""),
paste(tens2[6], chineseNumber2_char[.x], sep = "") )}  )
`71` <- unlist(`71`)
}
{
`81` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[7], chineseNumber1_char[.x], sep = ""),
paste(tens2[7], chineseNumber2_char[.x], sep = "") )}  )
`81` <- unlist(`81`)
}
{
`91` <-
map(
list(2,3,4,5,6,7,8,9,10),
~{c(
paste(tens1[8], chineseNumber1_char[.x], sep = ""),
paste(tens2[8], chineseNumber2_char[.x], sep = "") )}  )
`91` <- unlist(`91`)
}
# 世紀大合併
levels99 <- list(`0`,
`11`, tens1[1], tens2[1],
`21`, tens1[2], tens2[2],
`31`, tens1[3], tens2[3],
`41`, tens1[4], tens2[4],
`51`, tens1[5], tens2[5],
`61`, tens1[6], tens2[6],
`71`, tens1[7], tens2[7],
`81`, tens1[8], tens2[8],
`91`)
levels99 <- unlist(levels99) # 99*2 + "零" = 199
# factor
newLevels <- factor(
oldLevels,
levels = levels99
)
xfun::download_file("https://www.dropbox.com/s/vt10xxig64levmj/list_heritageYears.json?dl=1", mode="wb")
list_heritageYears <- jsonlite::fromJSON("list_heritageYears.json")
View(list_heritageYears)
knitr::opts_chunk$set(echo = TRUE)
#' Sorting chinese numbers
#'
#' @param origin A character vector of Chinese numbers
#' @param descreasing A logical (default=F). TRUE means the return result should order numbers from the largest to the smallest
#'
#' @return A sorted vector of origin input
#' @export
#'
#' @examples None.
sort_chineseNumbers <- function(origin, descreasing=F){
return(sorted_origin)
}
knitr::opts_chunk$set(echo = TRUE)
#' Sorting chinese numbers
#'
#' @param origin A character vector of Chinese numbers
#' @param descreasing A logical (default=F). TRUE means the return result should order numbers from the largest to the smallest
#'
#' @return A sorted vector of origin input
#' @export
#'
#' @examples None.
sort_chineseNumbers <- function(origin, descreasing=F){
return(sorted_origin)
}
View(sort_chineseNumbers)
# 排序
chineseNumber1 <- "零一二三四五六七八九十"
chineseNumber2 <- "零壹貳參肆伍陸柒捌玖拾"
chineseNumber1_char <- unlist(stringr::str_split(chineseNumber1,""))
chineseNumber2_char <- unlist(stringr::str_split(chineseNumber2,""))
oldLevels <- c("一", "七", "五", "五十七", "參拾參", "拾壹")
library(stringr)
library(glue)
library(purrr)
# 排序
glue(12,23,sep="2")
# 排序
glue(12,23,sep="50")
# 排序
cut(12,23,sep="50")
# 排序
cut(12,23,sep="20")
# 排序
cut(12,23,sep=2)
# 排序
cut(12,23,sep=1)
# 排序
cut(12,23,sep=)
# 排序
cut(12,23)
# 排序
cut(12,23,sep="2")
# 排序
cut(12,2,sep="2")
# 排序
cut(12,sep="2")
# 排序
cut(12,sep=2)
# 排序
map(
1:length(oldLevels),
split(oldLevels[.x])
)
# 排序
map(
1:2,
split(oldLevels[.x])
)
# 排序
map(
list(1,2),
split(oldLevels[.x])
)
# 排序
map(
list(1,2),
str_split(oldLevels[.x])
)
# 排序
map(
1:length(oldLevels),
map(
1:str_length[.x],
str_split(oldLevels[.x])
)
)
# 排序
map(
1:length(oldLevels),
map(
1:str_length[.x],
str_replace_all(
oldLevels[.x],
c(
map(
1:11,
chineseNumber1_char[.x]|chineseNumber2_char[.x] = .x-1,
# 排序
map(
1:length(oldLevels),
map(
1:str_length[.x],
str_replace_all(
oldLevels[.x],
c(
map(
1:11,
chineseNumber1_char[.x]|chineseNumber2_char[.x] = ".x-1",
# 排序
map(
1:length(oldLevels),
map(
1:str_length[.x],
str_replace_all(
oldLevels[.x],
c(
map(
1:11,
chineseNumber1_char[.x] = .x-1,
# 排序
map(
1:length(oldLevels),
map(
1:str_length[.x],
str_replace_all(
oldLevels[.x],
c(
map(
1:11,
chineseNumber1_char[.x] = .x-1,
# 排序
map(
1:length(oldLevels),
map(
1:str_length[.x],
str_replace_all(
oldLevels[.x],
c(
map(
1:11,
chineseNumber1_char[.x] = .x-1,
# 排序
map(
1:length(oldLevels),
map(
1:str_length[.x],
str_replace_all(
oldLevels[.x],
c(
map(
1:11,
chineseNumber1_char[.x] = .x-1,
# 排序
map(
1:length(oldLevels),
map(
1:str_length[.x],
str_replace_all(
oldLevels[.x],
c(
map(
1:11,
chineseNumber1_char[.x] = .x-1,
# 排序
map(
1:length(oldLevels),
map(
1:str_length[.x],
str_replace_all(
oldLevels[.x],
c(
map(
1:11,
"chineseNumber1_char[.x]" = .x-1,
"chineseNumber2_char[.x]" = .x-1
)
)
)
)
)
# 排序
map(
1:length(oldLevels),
map(
1:str_length[.x],
str_replace_all(
oldLevels[.x],
c(
map(
.y = 1:11,
"chineseNumber1_char[.y]" = .y-1,
"chineseNumber2_char[.y]" = .y-1
)
)
)
)
)
# 排序
map(
`..1` = 1:length(oldLevels),
map(
`..2`= 1:str_length[`..1`],
str_replace_all(
`..3` = 1:oldLevels[`..2`],
c(
map(
.y = 1:11,
"chineseNumber1_char[`..3`]" = `..3`-1,
"chineseNumber2_char[`..3`]" = `..3`-1
)
)
)
)
)
# 排序
map(
`..1` = 1:length(oldLevels),
map(
`..2`= 1:str_length[`..1`],
str_replace_all(
1:oldLevels[`..2`],
c(
map(
`..3` = 1:11,
"chineseNumber1_char[`..3`]" = `..3`-1,
"chineseNumber2_char[`..3`]" = `..3`-1
)
)
)
)
)
map2(.x = 1:length(oldLevels), .y = 1:str_length[.x], .z = 1:11,
str_replace_all(
1:oldLevels[.y],
c(
"chineseNumber1_char[.z]" = .z-1,
"chineseNumber2_char[.z]" = .z-1
)
)
)
map3(.x = 1:length(oldLevels),
.y = 1:str_length[.x],
.z = 1:11,
str_replace_all(
1:oldLevels[.y],
c(
"chineseNumber1_char[.z]" = .z-1,
"chineseNumber2_char[.z]" = .z-1
)
)
)
