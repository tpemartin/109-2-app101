c(test_data[1],returnedGPS[1],test_data[2],returnedGPS[2])
) -> test_matrix
library(sp)
test_matrix
matrix(
c(test_data[1],returnedGPS[1],test_data[2],returnedGPS[2]),
2
) -> test_matrix
test_matrix
test_matrix[1,]
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)
### 1 returnedGPS 經緯互換
c(returnedGPS[2],returnedGPS[1]) -> returnedGPS
test_data <- c(122,23)
matrix(
c(test_data[1],returnedGPS[1],test_data[2],returnedGPS[2]),
2
) -> test_matrix
test_matrix
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)
spDistsN1(pts = test_matrix, pt = test_matrix[,1] , TRUE)
test_matrix[1,]
test_matrix[,1]
spDistsN1(pts = test_matrix, pt = test_matrix[,1] , TRUE)
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2]
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
caseId = heritage$data$caseId[2]
heritage$data$caseId[2]
now()
library(lubridate)
now()
library(purrr)
map(
seq_along(heritageData),
### 2 作成計算用矩陣
rm(test_data)
matrix(
c(heritageData$longitude[.x],returnedGPS[1],heritageData$latitude[.x],returnedGPS[2]),
2
) -> test_matrix
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
if(distance <= 100){
checkInResult <- list(
timestamp = now(),
caseId = heritage$data$caseId[2]
)
}else{
checkInResult <- NULL
}
# map 下
)
map(
seq_along(heritageData),
### 2 作成計算用矩陣
rm(test_data)
matrix(
c(heritageData$longitude[.x],returnedGPS[1],heritageData$latitude[.x],returnedGPS[2]),
2
) -> test_matrix
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
if(distance <= 100){
checkInResult <- list(
timestamp = now(),
caseId = heritage$data$caseId[2]
)
}else{
checkInResult <- NULL
}
# map 下
)
rm(test_data)
heritage$validate_checkIn <- function(returnedGPS){
## 整理資料
library(sp)
library(lubridate)
library(purrr)
### 1 returnedGPS 經緯互換
c(returnedGPS[2],returnedGPS[1]) -> returnedGPS
# map 上
map(
seq_along(heritageData),
### 2 作成計算用矩陣
matrix(
c(heritageData$longitude[.x],returnedGPS[1],heritageData$latitude[.x],returnedGPS[2]),
2
) -> test_matrix
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
if(distance <= 100){
checkInResult <- list(
timestamp = now(),
caseId = heritage$data$caseId[.x]
)
}else{
checkInResult <- NULL
}
# map 下
)
# function 下
}
spDistsN1( pts = test_matrix , pt = test_matrix[1,] , TRUE)[2]
matrix(
c(heritageData$longitude[.x], returnedGPS[1], heritageData$latitude[.x], returnedGPS[2]),
2
) -> test_matrix
map(1:2,
.x+1 -> y)
heritage$validate_checkIn <- function(returnedGPS){
## 整理資料
library(sp)
library(lubridate)
library(purrr)
### 1 returnedGPS 經緯互換
c(returnedGPS[2],returnedGPS[1]) -> returnedGPS
# for 上
for (.x in seq_along(heritageData)) {
### 2 作成計算用矩陣
matrix(
c(heritageData$longitude[.x], returnedGPS[1], heritageData$latitude[.x], returnedGPS[2]),
2
) -> test_matrix
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
if(distance <= 100){
checkInResult[length(checkInResult)+1] <- list(
timestamp = now(),
caseId = heritage$data$caseId[.x]
)
}
# for 下
}
if(length(checkInResult) == 0){
checkInResult <- NULL
}
return(checkInResult)
# function 下
}
heritage$validate_checkIn <- function(returnedGPS){
## 整理資料
library(sp)
library(lubridate)
library(purrr)
### 1 returnedGPS 經緯互換
c(returnedGPS[2],returnedGPS[1]) -> returnedGPS
# for 上
for (.x in seq_along(heritageData)) {
### 2 作成計算用矩陣
matrix(
c(heritageData$longitude[.x], returnedGPS[1], heritageData$latitude[.x], returnedGPS[2]),
2
) -> test_matrix
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
if(distance <= 100){
checkInResult[length(checkInResult)+1] <- list(
timestamp = now(),
caseId = heritage$data$caseId[.x]
)
}
# for 下
}
if(length(checkInResult) == 0){
checkInResult <- NULL
}
return(checkInResult)
# function 下
}
heritage$validate_checkIn
heritage$validate_checkIn(c(25,123))
heritage$validate_checkIn(c(26,123))
heritage$validate_checkIn(c(23.4,120))
length(checkInResult)
heritage$validate_checkIn <- function(returnedGPS){
## 整理資料
library(sp)
library(lubridate)
library(purrr)
checkInResult <- list()
### 1 returnedGPS 經緯互換
c(returnedGPS[2],returnedGPS[1]) -> returnedGPS
# for 上
for (.x in seq_along(heritageData)) {
### 2 作成計算用矩陣
matrix(
c(heritageData$longitude[.x], returnedGPS[1], heritageData$latitude[.x], returnedGPS[2]),
2
) -> test_matrix
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
if(distance <= 100){
checkInResult[length(checkInResult)+1] <- list(
timestamp = now(),
caseId = heritage$data$caseId[.x]
)
}
# for 下
}
if(length(checkInResult) == 0){
checkInResult <- NULL
}
return(checkInResult)
# function 下
}
heritage$validate_checkIn(c(23.4,120))
seq_along(heritageData
seq_along(heritageData
seq_along(heritageData)
View(heritageData)
seq_along(heritageData$caseId)
heritage$validate_checkIn <- function(returnedGPS){
## 整理資料
library(sp)
library(lubridate)
library(purrr)
checkInResult <- list()
### 1 returnedGPS 經緯互換
c(returnedGPS[2],returnedGPS[1]) -> returnedGPS
# for 上
for (.x in seq_along(heritageData$caseId)) {
### 2 作成計算用矩陣
matrix(
c(heritageData$longitude[.x], returnedGPS[1], heritageData$latitude[.x], returnedGPS[2]),
2
) -> test_matrix
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
if(distance <= 100){
checkInResult[length(checkInResult)+1] <- list(
timestamp = now(),
caseId = heritage$data$caseId[.x]
)
}
# for 下
}
if(length(checkInResult) == 0){
checkInResult <- NULL
}
return(checkInResult)
# function 下
}
heritage$validate_checkIn(c(23.4,120))
# 不確定要不要放
# if(!is.null(checkInResult)){
#   user$checkIns <- append(
#     user$checkIns,
#     list(checkInResult)
#   )
# }
heritageData$longitude[30]
heritageData$longitude[5]
heritage$validate_checkIn <- function(returnedGPS){
## 整理資料
library(sp)
library(lubridate)
library(purrr)
checkInResult <- list()
### 1 returnedGPS 經緯互換
c(returnedGPS[2],returnedGPS[1]) -> returnedGPS
# for 上
for (.x in seq_along(heritageData$caseId)) {
# 拒絕處理 NA
if(!is.na(heritageData$longitude[.x]) && !is.na(heritageData$latitude[.x])){
### 2 作成計算用矩陣
matrix(
c(heritageData$longitude[.x], returnedGPS[1], heritageData$latitude[.x], returnedGPS[2]),
2
) -> test_matrix
}
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
if(distance <= 100){
checkInResult[length(checkInResult)+1] <- list(
timestamp = now(),
caseId = heritage$data$caseId[.x]
)
}
# for 下
}
if(length(checkInResult) == 0){
checkInResult <- NULL
}
return(checkInResult)
# function 下
}
heritage$validate_checkIn(c(23.4,120))
heritage$validate_checkIn <- function(returnedGPS){
## 整理資料
library(sp)
library(lubridate)
library(purrr)
checkInResult <- list()
### 1 returnedGPS 經緯互換
c(returnedGPS[2],returnedGPS[1]) -> returnedGPS
# for 上
for (.x in seq_along(heritageData$caseId)) {
# 拒絕處理 NA
if(!is.na(heritageData$longitude[.x]) && !is.na(heritageData$latitude[.x])){
### 2 作成計算用矩陣
matrix(
c(heritageData$longitude[.x], returnedGPS[1], heritageData$latitude[.x], returnedGPS[2]),
2
) -> test_matrix
}
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , FALSE)[2] -> distance
if(distance <= 100){
checkInResult[length(checkInResult)+1] <- list(
timestamp = now(),
caseId = heritage$data$caseId[.x]
)
}
# for 下
}
if(length(checkInResult) == 0){
checkInResult <- NULL
}
return(checkInResult)
# function 下
}
heritage$validate_checkIn(c(23.4,120))
heritage$validate_checkIn <- function(returnedGPS){
## 整理資料
library(sp)
library(lubridate)
library(purrr)
checkInResult <- list()
### 1 returnedGPS 經緯互換
c(returnedGPS[2],returnedGPS[1]) -> returnedGPS
# for 上
for (.x in seq_along(heritageData$caseId)) {
# 拒絕處理 NA
if(!is.na(heritageData$longitude[.x]) && !is.na(heritageData$latitude[.x])){
### 2 作成計算用矩陣
matrix(
c(heritageData$longitude[.x], returnedGPS[1], heritageData$latitude[.x], returnedGPS[2]),
2
) -> test_matrix
}
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
if(distance <= 100){
checkInResult[length(checkInResult)+1] <- list(
timestamp = now(),
caseId = heritage$data$caseId[.x]
)
}
# for 下
}
if(length(checkInResult) == 0){
checkInResult <- NULL
}
return(checkInResult)
# function 下
}
heritage$validate_checkIn <- function(returnedGPS){
## 整理資料
library(sp)
library(lubridate)
library(purrr)
checkInResult <- list()
### 1 returnedGPS 經緯互換
c(returnedGPS[2],returnedGPS[1]) -> returnedGPS
# for 上
for (.x in seq_along(heritageData$caseId)) {
# 拒絕處理 NA
if(!is.na(heritageData$longitude[.x]) && !is.na(heritageData$latitude[.x])){
### 2 作成計算用矩陣
matrix(
c(heritageData$longitude[.x], returnedGPS[1], heritageData$latitude[.x], returnedGPS[2]),
2
) -> test_matrix
}
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
if(distance <= 100){
checkInResult[length(checkInResult)+1] <- list(
timestamp = now(),
caseId = heritage$data$caseId[.x]
)
}
# for 下
}
if(length(checkInResult) == 0){
checkInResult <- NULL
}
return(checkInResult)
# function 下
}
heritage$validate_checkIn(c(23.4,120))
heritage$validate_checkIn <- function(returnedGPS){
## 整理資料
library(sp)
library(lubridate)
library(purrr)
checkInResult <- list()
### 1 returnedGPS 經緯互換
c(returnedGPS[2],returnedGPS[1]) -> returnedGPS
# for 上
for (.x in seq_along(heritageData$caseId)) {
# 拒絕處理 NA
if(!is.na(heritageData$longitude[.x]) && !is.na(heritageData$latitude[.x])){
### 2 作成計算用矩陣
matrix(
c(heritageData$longitude[.x], returnedGPS[1], heritageData$latitude[.x], returnedGPS[2]),
2
) -> test_matrix
}
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
if(distance <= 0.1){
checkInResult[length(checkInResult)+1] <- list(
timestamp = now(),
caseId = heritage$data$caseId[.x]
)
}
# for 下
}
if(length(checkInResult) == 0){
checkInResult <- NULL
}
return(checkInResult)
# function 下
}
heritage$validate_checkIn(c(23.4,120))
heritage$validate_checkIn(c(23.4,120.4508))
heritage$validate_checkIn(c(23.4815,120.4508))
heritage$validate_checkIn <- function(returnedGPS){
## 整理資料
library(sp)
library(lubridate)
library(purrr)
checkInResult <- list()
### 1 returnedGPS 經緯互換
c(returnedGPS[2],returnedGPS[1]) -> returnedGPS
# for 上
for (.x in seq_along(heritageData$caseId)) {
# 拒絕處理 NA
if(!is.na(heritageData$longitude[.x]) && !is.na(heritageData$latitude[.x])){
### 2 作成計算用矩陣
matrix(
c(heritageData$longitude[.x], returnedGPS[1], heritageData$latitude[.x], returnedGPS[2]),
2
) -> test_matrix
}
## 計算與判斷
spDistsN1(pts = test_matrix, pt = test_matrix[1,] , TRUE)[2] -> distance
if(distance <= 0.1){
checkInResult <- append(
checkInResult,
list(
timestamp = now(),
caseId = heritage$data$caseId[.x]
)
)
}
# for 下
}
if(length(checkInResult) == 0){
checkInResult <- NULL
}
return(checkInResult)
# function 下
}
heritage$validate_checkIn(c(23.4815,120.4508))
heritage$validate_checkIn(c(23.4815,120.4508))
heritage$validate_checkIn(c(23.4815,120.4508)) -> checkInResult
source(
file.path(.root(),"R/field_trips_all.R"),
)
# track -------------------------------------------------------------------
# when user turn on tracking in the frontend, user's phone will track his GPX
source(
file.path(.root(),"R/field_trips_all.R"),
)
.root <- rprojroot::is_rstudio_project$make_fix_file()
# track -------------------------------------------------------------------
# when user turn on tracking in the frontend, user's phone will track his GPX
source(
file.path(.root(),"R/field_trips_all.R"),
)
# track -------------------------------------------------------------------
# when user turn on tracking in the frontend, user's phone will track his GPX
source(
file.path(.root(),"R/field_trips_all.R"),
)
# track -------------------------------------------------------------------
# when user turn on tracking in the frontend, user's phone will track his GPX
source(
file.path(.root(),"R/field_trips_all.R"),
encoding = "UTF-8"
)
# track -------------------------------------------------------------------
# when user turn on tracking in the frontend, user's phone will track his GPX
source(
file.path(.root(),"R/field_trips_all.R"),
encoding = "UTF-8"
)
source('C:/Users/su200/Documents/GitHub/109-2-app101/R/field_trips_all.R')
xfun::download_file(
"https://www.dropbox.com/s/hrcaa0cqdr2fzk0/GPX-20210526T044452Z-001.zip?dl=0",
output = destfile,
mode="wb"
)
source('C:/Users/su200/Documents/GitHub/109-2-app101/R/field_trips_all.R')
source('C:/Users/su200/Documents/GitHub/109-2-app101/R/field_trips_all.R')
source(
file.path(.root(),"R/field_trips_all.R"),
encoding = "UTF-8"
)
